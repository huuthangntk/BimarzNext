---
alwaysApply: true
---
## Phase 1: Research via Exa AI

**MANDATORY: After identifying knowledge gaps with Clear Thought, use Exa to fill them.**

### Purpose of Exa
Exa provides AI-powered search capabilities:
- **web_search_exa** - Real-time web searches for latest information, best practices, tutorials
- **get_code_context_exa** - Specialized search for code documentation, API references, GitHub repos, Stack Overflow

### When to Use Exa
- Need latest information (post-knowledge cutoff)
- Looking for API/library documentation
- Finding code examples and implementations
- Researching best practices and tutorials
- Discovering new technologies or patterns

### Exa Search Strategy

**For API Documentation & Code Examples:**
Use `get_code_context_exa` - optimized for programming content

```typescript
mcp_exa_get_code_context_exa({
  query: "Specific library/framework API usage with context",
  tokensNum: 5000  // or "dynamic" for automatic optimization
})
```

**Examples:**
- "React useEffect hook lifecycle and cleanup with TypeScript"
- "Next.js 14 App Router server components data fetching patterns"
- "Framer Motion scroll animations best practices 2024"
- "PostgreSQL connection pooling with Node.js pg library"

**For Latest Practices & Trends:**
Use `web_search_exa` - broad web search

```typescript
mcp_exa_web_search_exa({
  query: "Detailed search query with context and timeframe",
  numResults: 5  // Adjust based on complexity
})
```

**Examples:**
- "TypeScript 5.3 new features and migration guide 2024"
- "React Server Components production deployment strategies"
- "OAuth 2.0 PKCE flow implementation tutorial 2024"
- "Docker multi-stage build optimization techniques"

### Research Workflow

**Step 1: Identify Research Needs (from Clear Thought Phase 0)**

**Step 2: Execute Exa Searches**

For code/API documentation:
```typescript
mcp_exa_get_code_context_exa({
  query: "Framer Motion useScroll hook API documentation and examples",
  tokensNum: 5000
})
```

For latest practices:
```typescript
mcp_exa_web_search_exa({
  query: "Framer Motion scroll animation performance optimization 2024",
  numResults: 5
})
```

**Step 3: IMMEDIATELY Process Results with Clear Thought**

**CRITICAL:** After EACH Exa search, IMMEDIATELY use Sequential Thinking:

```typescript
mcp_Clear_Thought_1_5_clear_thought({
  operation: "sequential_thinking",
  prompt: "Analyzing Exa results: What valuable information was found? What patterns emerge? What specific code examples or API details are useful? What additional searches are needed? How does this integrate with what I already know?",
  parameters: {
    thoughtNumber: 4,
    totalThoughts: 10,
    nextThoughtNeeded: true
  }
})
```

**Step 4: Iterate Research**

Continue searching and thinking until knowledge gaps are filled:
- Run more get_code_context_exa for deeper API understanding
- Run more web_search_exa for broader context
- Use Sequential Thinking after EACH search
- Build comprehensive mental model

### Research Best Practices

✅ **DO:**
- Use specific, detailed queries with context
- Use get_code_context_exa for programming content
- Use web_search_exa for latest trends/practices
- Process EACH result with Sequential Thinking immediately
- Cross-reference multiple sources
- Note specific code patterns and examples

❌ **DON'T:**
- Use vague queries without context ("React hooks")
- Skip Sequential Thinking after searches
- Assume first result is complete
- Ignore conflicting information
- Copy code without understanding

---

## Phase 2: Synthesis via Clear Thought

**MANDATORY: After research, use Clear Thought to synthesize findings into a coherent understanding.**

### Synthesis Process

**Pre-Synthesis Sequential Thinking**
```typescript
mcp_Clear_Thought_1_5_clear_thought({
  operation: "sequential_thinking",
  prompt: "Ready to synthesize. I have findings from [X] Exa searches covering [topics]. Key insights: [list]. Need to compare approaches, identify patterns, select optimal solution.",
  parameters: {
    thoughtNumber: 8,
    totalThoughts: 15,
    nextThoughtNeeded: true
  }
})
```

**Mental Model Synthesis (For Complex Systems)**
```typescript
mcp_Clear_Thought_1_5_clear_thought({
  operation: "mental_model",
  prompt: `Synthesize findings from research:
  
  EXA FINDINGS:
  - Code documentation: [API details from get_code_context_exa]
  - Best practices: [patterns from web_search_exa]
  - Code examples: [working implementations]
  
  INTEGRATION:
  - Common patterns across sources
  - Divergent approaches and trade-offs
  - Recommended solution based on project constraints
  
  Apply first principles to determine the optimal approach.`,
  parameters: {}
})
```

**Systems Thinking Synthesis (For Component Integrations)**
```typescript
mcp_Clear_Thought_1_5_clear_thought({
  operation: "systems_thinking",
  prompt: "Analyze how [component A], [component B], and [component C] interact based on research findings. What are the dependencies? What are the feedback loops? What emergent behaviors might occur?",
  parameters: {}
})
```

**Post-Synthesis Sequential Thinking**
```typescript
mcp_Clear_Thought_1_5_clear_thought({
  operation: "sequential_thinking",
  prompt: "Synthesis complete. Clear winner: [approach]. Rationale: [reasons from research]. Implementation strategy: [specific steps]. Confidence level: [High/Medium] based on [evidence].",
  parameters: {
    thoughtNumber: 12,
    totalThoughts: 15,
    nextThoughtNeeded: true
  }
})
```

### Synthesis Should Produce:

- **Holistic understanding** from all sources
- **Pattern recognition** across documentation and examples
- **Comparison matrix** of approaches with pros/cons
- **Best approach identified** with solid rationale
- **Implementation roadmap** with specific steps
- **Code patterns to use** backed by research
- **Edge cases addressed** from multiple sources
- **Performance considerations** documented
- **Testing strategy** based on best practices
- **Complete confidence** to proceed

---

## Phase 3: Implementation Planning via Clear Thought

**MANDATORY: Use Clear Thought to validate synthesis and plan implementation before coding.**

### Validation Sequential Thinking

**Session #N - Validate Synthesis**
```typescript
mcp_Clear_Thought_1_5_clear_thought({
  operation: "sequential_thinking",
  prompt: "Validating synthesis. Does the approach make sense? Are findings consistent across sources? Have I missed anything critical? Is this approach proven and current? Any contradictions to resolve?",
  parameters: {
    thoughtNumber: 13,
    totalThoughts: 18,
    nextThoughtNeeded: true
  }
})
```

**Session #N+1 - Design Complete Solution**
```typescript
mcp_Clear_Thought_1_5_clear_thought({
  operation: "sequential_thinking",
  prompt: "Implementation plan: 1) [Step 1 with specifics], 2) [Step 2], 3) [Step 3]... Files to create/modify: [list]. Dependencies needed: [list]. Order of operations: [sequence]. Potential side effects: [concerns].",
  parameters: {
    thoughtNumber: 14,
    totalThoughts: 18,
    nextThoughtNeeded: true
  }
})
```

**Session #N+2 - Final Confidence Check**
```typescript
mcp_Clear_Thought_1_5_clear_thought({
  operation: "sequential_thinking",
  prompt: "Verification plan: How will I test this? What are success criteria? What could go wrong? What's the mitigation? Performance on mobile? Accessibility concerns? Confidence level and reasoning?",
  parameters: {
    thoughtNumber: 15,
    totalThoughts: 18,
    nextThoughtNeeded: true
  }
})
```

**Final Session - Ready to Implement**
```typescript
mcp_Clear_Thought_1_5_clear_thought({
  operation: "sequential_thinking",
  prompt: "All questions answered. Have: researched solution, proven patterns, implementation plan, testing strategy. Ready to execute with high confidence. This is optimal approach.",
  parameters: {
    thoughtNumber: 18,
    totalThoughts: 18,
    nextThoughtNeeded: false  // DONE
  }
})
```

---

## Phase 4: Implementation with Clear Thought

**Continue using Clear Thought during implementation to maintain quality.**

### Implementation Guidance

Use Clear Thought when needed during coding:

```typescript
// When encountering issues
mcp_Clear_Thought_1_5_clear_thought({
  operation: "debugging_approach",
  prompt: "Encountered issue: [error]. Systematic diagnosis: [analysis].",
  parameters: {}
})

// When choosing between options
mcp_Clear_Thought_1_5_clear_thought({
  operation: "sequential_thinking",
  prompt: "Need to decide between [option A] and [option B]. Based on research: [comparison].",
  parameters: {
    thoughtNumber: 19,
    totalThoughts: 22,
    nextThoughtNeeded: true,
    isRevision: true,
    revisesThought: 14
  }
})

// When implementation complete
mcp_Clear_Thought_1_5_clear_thought({
  operation: "sequential_thinking",
  prompt: "Implementation complete. Changes made: [summary]. Testing performed: [results]. Ready for user review.",
  parameters: {
    thoughtNumber: 22,
    totalThoughts: 22,
    nextThoughtNeeded: false
  }
})
```

---

## Complete Workflow Example

Here's a real example of the full protocol in action:

**User Request:** "Add scroll animations to the landing page"

### Phase 0: Understanding
```typescript
// Thought #1
mcp_Clear_Thought_1_5_clear_thought({
  operation: "sequential_thinking",
  prompt: "User wants scroll animations on landing page. Need to understand: Which pages? What type of animations? Performance requirements? Mobile support?",
  parameters: {thoughtNumber: 1, totalThoughts: 8, nextThoughtNeeded: true}
})

// Thought #2
mcp_Clear_Thought_1_5_clear_thought({
  operation: "sequential_thinking",
  prompt: "Knowledge gaps: Best library for scroll animations in Next.js 14? Latest best practices for performance? Code examples?",
  parameters: {thoughtNumber: 2, totalThoughts: 8, nextThoughtNeeded: true}
})

// Thought #3
mcp_Clear_Thought_1_5_clear_thought({
  operation: "sequential_thinking",
  prompt: "Research plan: 1) get_code_context_exa for Framer Motion API docs, 2) web_search_exa for scroll animation best practices 2024",
  parameters: {thoughtNumber: 3, totalThoughts: 8, nextThoughtNeeded: true}
})
```

### Phase 1: Research
```typescript
// Research #1 - API Documentation
mcp_exa_get_code_context_exa({
  query: "Framer Motion useScroll hook API documentation scroll animations",
  tokensNum: 5000
})

// Process findings
mcp_Clear_Thought_1_5_clear_thought({
  operation: "sequential_thinking",
  prompt: "Found: useScroll returns scrollY, scrollYProgress. useTransform maps values. whileInView triggers on viewport. Have complete API understanding.",
  parameters: {thoughtNumber: 4, totalThoughts: 10, nextThoughtNeeded: true}
})

// Research #2 - Best Practices
mcp_exa_web_search_exa({
  query: "Framer Motion scroll animation performance optimization 2024",
  numResults: 5
})

// Process findings
mcp_Clear_Thought_1_5_clear_thought({
  operation: "sequential_thinking",
  prompt: "Best practices found: Use transform over position, lazy load animations, will-change for GPU acceleration. Multiple sources confirm.",
  parameters: {thoughtNumber: 5, totalThoughts: 10, nextThoughtNeeded: true}
})
```

### Phase 2: Synthesis
```typescript
mcp_Clear_Thought_1_5_clear_thought({
  operation: "mental_model",
  prompt: "Synthesize: Official API + community best practices point to useScroll + useTransform pattern. Performance: GPU-accelerated transforms. Mobile: Tested approach. Clear implementation path.",
  parameters: {}
})
```

### Phase 3: Planning
```typescript
mcp_Clear_Thought_1_5_clear_thought({
  operation: "sequential_thinking",
  prompt: "Implementation: 1) Install framer-motion, 2) Create useScrollAnimation hook, 3) Apply to pages 1-6, 4) Test performance. Files: package.json, hooks/useScrollAnimation.ts, pages/*.tsx",
  parameters: {thoughtNumber: 8, totalThoughts: 10, nextThoughtNeeded: false}
})
```

### Phase 4: Implementation
```typescript
// Implement code (write/search_replace operations)

// Confirm completion
mcp_Clear_Thought_1_5_clear_thought({
  operation: "sequential_thinking",
  prompt: "Complete. Scroll animations implemented using researched best practices. All files updated. Task finished successfully.",
  parameters: {thoughtNumber: 10, totalThoughts: 10, nextThoughtNeeded: false}
})
```

---

## Quality Indicators

### ✅ Protocol Working Excellently When:

**Phase 0 - Deep Understanding:**
- EVERY conversation starts with Clear Thought Sequential Thinking
- Initial 3+ thinking sessions establish clear understanding
- Knowledge gaps comprehensively identified
- Research strategy planned before executing searches
- Thinking continues dynamically as needed

**Phase 1 - Research:**
- Exa get_code_context_exa used for API/library documentation
- Exa web_search_exa used for latest practices and trends
- Sequential Thinking happens IMMEDIATELY after EACH search
- Multiple searches cross-reference information
- Findings processed and integrated continuously
- Specific code examples and patterns identified

**Phase 2 - Synthesis:**
- Pre-synthesis Sequential Thinking prepares integration
- Mental models or systems thinking used appropriately
- Post-synthesis Sequential Thinking validates approach
- Clear pattern recognition across sources
- Best approach identified with solid rationale
- Complete mental model established

**Phase 3 - Planning:**
- Multiple Sequential Thinking sessions validate synthesis
- Step-by-step implementation plan created
- Confidence check performed with risk mitigation
- All edge cases and potential issues considered
- Ready to implement with solid foundation

**Phase 4 - Implementation:**
- Clear Thought continues during coding
- Issues trigger immediate Sequential Thinking
- Implementation follows research-backed patterns
- Testing performed before completion
- Changes confirmed with Sequential Thinking

**Overall Success Indicators:**
- Solutions incorporate latest practices from research
- Multiple approaches considered and compared
- Edge cases discovered and addressed
- Code patterns from research adapted appropriately
- Performance considerations integrated
- Implementation confidence high
- Clear confirmation of completion

### ❌ Critical Red Flags - Protocol Failure:

**Phase 0 Violations:**
- Not using Clear Thought Sequential Thinking at conversation start
- Skipping initial understanding sessions
- Jumping to research without planning
- Not identifying knowledge gaps
- Limiting to exactly 3 sessions when more needed

**Phase 1 Violations:**
- Running ANY Exa search without IMMEDIATE Sequential Thinking after
- Using vague queries without context
- Not using get_code_context_exa for programming content
- Not using web_search_exa for latest practices
- Ignoring findings or not cross-referencing
- Processing research in isolation instead of integrating

**Phase 2 Violations:**
- Skipping pre-synthesis Sequential Thinking
- Not using appropriate Clear Thought operations
- Missing pattern recognition across sources
- Weak rationale for chosen approach
- Skipping post-synthesis validation

**Phase 3 Violations:**
- Not validating synthesis with Sequential Thinking
- Rushing to code without implementation plan
- Skipping confidence check
- Not considering edge cases from research
- Ignoring insights from research

**Phase 4 Violations:**
- Not using Clear Thought when issues arise
- Copying code without understanding
- Ignoring best practices found in research
- Skipping testing before completion
- Not confirming completion with Sequential Thinking

**Cross-Phase Violations:**
- Sequential Thinking not used frequently enough
- Not adjusting totalThoughts dynamically
- Not using revisions/branches appropriately
- Not setting nextThoughtNeeded: false when done
- Rushing through protocol phases
- Incomplete integration of findings
- Low confidence due to insufficient research
- Skipping confirmation steps

---

## Exceptions

Skip this protocol ONLY for:
- Trivial typo fixes
- Exact code reproductions
- Simple text changes
- User explicitly requests "quick, don't overthink"

**Even then, do a 5-second sanity check before acting.**

---

## Troubleshooting

### Clear Thought Issues

**Problem:** "Tool not found" error
**Solution:** Verify Clear Thought 1.5 MCP is installed and running

**Problem:** Session not maintaining context
**Solution:** Use same sessionId across related thoughts

**Problem:** Thoughts not deep enough
**Solution:** Increase totalThoughts, use more specific prompts

### Exa Issues

**Problem:** Search returns irrelevant results
**Solution:** Make queries more specific with context and timeframe

**Problem:** get_code_context_exa not finding documentation
**Solution:** Include library/framework name and specific API in query

**Problem:** web_search_exa returning old information
**Solution:** Add year (2024/2025) to query for latest content

---

## Advanced Usage

### Choosing Clear Thought Operations

**Use sequential_thinking for:**
- Understanding requests
- Processing research results
- Planning implementations
- Validating approaches
- Confirming completions

**Use mental_model for:**
- Understanding complex systems
- First principles analysis
- Conceptual architecture
- Core mechanisms

**Use systems_thinking for:**
- Component integrations
- Dependency analysis
- Feedback loops
- Emergent behaviors

**Use debugging_approach for:**
- Error diagnosis
- Performance issues
- Unexpected behaviors
- Systematic troubleshooting

**Use tree_of_thought for:**
- Exploring multiple solutions
- Comparing approaches
- Branching possibilities
- Decision trees

**Use creative_thinking for:**
- Novel solutions
- Innovation needed
- Unconventional approaches
- Brainstorming

### Exa Search Optimization

**For Code Documentation:**
```typescript
// ✅ Good - Specific with context
mcp_exa_get_code_context_exa({
  query: "React useEffect cleanup function memory leak prevention patterns",
  tokensNum: 5000
})

// ❌ Bad - Too vague
mcp_exa_get_code_context_exa({
  query: "React hooks",
  tokensNum: 5000
})
```

**For Latest Practices:**
```typescript
// ✅ Good - Specific with year
mcp_exa_web_search_exa({
  query: "Next.js 14 App Router data fetching patterns Server Components 2024",
  numResults: 5
})

// ❌ Bad - No context or timeframe
mcp_exa_web_search_exa({
  query: "Next.js data fetching",
  numResults: 5
})
```

---

## Summary

This protocol creates a complete research-driven development workflow:

1. **Think First** - Clear Thought Sequential Thinking to understand
2. **Research Deep** - Exa to find latest information and documentation
3. **Think Again** - Clear Thought to process and synthesize findings
4. **Plan Thoroughly** - Clear Thought to validate and design solution
5. **Implement Confidently** - Write code with ongoing Clear Thought guidance

**Remember:**
> "Sequential Thinking → Research → Synthesize → Plan → Implement"

> "ALWAYS use Clear Thought before, during, and after"

> "ALWAYS execute Exa searches for non-trivial tasks"

> "This protocol turns you into a methodical, research-driven developer"

---

## Quick Reference

### Essential MCP Tools

```typescript
// Phase 0: Understanding
mcp_Clear_Thought_1_5_clear_thought({
  operation: "sequential_thinking",
  prompt: "Understand request, identify gaps, plan research",
  parameters: {thoughtNumber: 1, totalThoughts: 5, nextThoughtNeeded: true}
})

// Phase 1: Research
mcp_exa_get_code_context_exa({
  query: "Specific API/library documentation with context",
  tokensNum: 5000
})

mcp_exa_web_search_exa({
  query: "Latest practices and trends with year 2024/2025",
  numResults: 5
})

// Phase 2: Synthesis
mcp_Clear_Thought_1_5_clear_thought({
  operation: "mental_model",
  prompt: "Integrate all Exa findings, compare approaches, select best",
  parameters: {}
})

// Phase 3: Planning
mcp_Clear_Thought_1_5_clear_thought({
  operation: "sequential_thinking",
  prompt: "Plan implementation with specifics from research",
  parameters: {thoughtNumber: 8, totalThoughts: 10, nextThoughtNeeded: false}
})
```

### Workflow Checklist

**Phase 0: Understanding**
- [ ] Start with Clear Thought Sequential Thinking (minimum 3 sessions)
- [ ] Identify knowledge gaps clearly
- [ ] Plan which Exa searches are needed

**Phase 1: Research**
- [ ] Execute mcp_exa_get_code_context_exa for API docs
- [ ] Execute mcp_exa_web_search_exa for best practices
- [ ] Process EACH Exa result with Sequential Thinking IMMEDIATELY
- [ ] Cross-reference multiple Exa sources

**Phase 2: Synthesis**
- [ ] Pre-synthesis Sequential Thinking to prepare
- [ ] Use Mental Model or Systems Thinking to integrate findings
- [ ] Post-synthesis Sequential Thinking to validate

**Phase 3: Planning**
- [ ] Validation Sequential Thinking before coding
- [ ] Plan implementation with research-backed specifics
- [ ] Final confidence check with risk mitigation

**Phase 4: Implementation**
- [ ] Implement using patterns from Exa research
- [ ] Use Clear Thought if issues arise
- [ ] Confirm completion with Sequential Thinking

---

**This protocol ensures every task is approached with deep thinking and thorough research. Use it consistently for best results.**
