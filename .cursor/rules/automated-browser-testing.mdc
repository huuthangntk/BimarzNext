---
description: Automated browser testing workflow using Playwright tools to test localhost:3000 with screenshot analysis and bug detection
---

# Automated Browser Testing - Port 3000 Complete QA Protocol

## Purpose

This rule provides a comprehensive workflow for using browser automation tools (Playwright) to:
1. Access the application running on `http://localhost:3000`
2. Take screenshots of all pages and states
3. Analyze screenshots for visual bugs
4. Test interactive functionality
5. Generate proof of bug-free implementation
6. Document all findings with evidence

## Prerequisites Check

Before starting automated testing:

```bash
# Ensure dev server is running
npm run dev

# Verify accessibility
curl http://localhost:3000
```

If server is not running, you MUST start it first.

## Complete Testing Workflow

### Step 1: Initial Navigation and Page Load Test

```
Tool: mcp_cursor-playwright_browser_navigate
Parameters:
  url: "http://localhost:3000"
  waitUntil: "networkidle"

Expected Result: Page loads successfully, Page 1 visible
```

### Step 2: Capture Initial State

```
Tool: mcp_cursor-playwright_browser_snapshot
Purpose: Get accessibility tree and interactive elements

Tool: mcp_cursor-playwright_browser_take_screenshot  
Parameters:
  filename: "page1-initial"
  fullPage: false
  type: "png"

Expected Result: Screenshot showing Page 1 (EXPOSED theme)
```

### Step 3: Systematic Page Navigation Testing

#### Test Each Page (1-7) with Screenshots

**Page 1 - EXPOSED (Fear & Danger)**
```
1. Already on Page 1
2. Take screenshot: "page1-fear-danger.png"
3. Verify elements:
   - Hero text: "Your Data is EXPOSED"
   - Red glitch animation visible
   - Scroll indicator present
4. Check console for errors
```

**Page 2 - YOU (Surveillance)**
```
1. Navigate: Scroll down or click page indicator dot 2
2. Wait 800ms for transition
3. Take screenshot: "page2-surveillance.png"
4. Verify elements:
   - Hero text: "YOU are being watched"
   - Circular scanning animation (NOT square!)
   - Orbital text elements
5. Check console for errors
```

**Page 3 - BLOCKED (Restrictions)**
```
1. Navigate: Scroll down or click page indicator dot 3
2. Wait 800ms for transition
3. Take screenshot: "page3-censorship.png"
4. Verify elements:
   - Hero text: "Your Internet is BLOCKED"
   - Censor bar animations
   - Foggy barrier effects
5. Check console for errors
```

**Page 4 - ? (Hope)**
```
1. Navigate: Scroll down or click page indicator dot 4
2. Wait 800ms for transition
3. Take screenshot: "page4-hope.png"
4. Verify elements:
   - Question mark or hope message
   - Warm golden light effect
   - Light emerging from center
5. Check console for errors
```

**Page 5 - VPN SOLUTION (Confidence)**
```
1. Navigate: Scroll down or click page indicator dot 5
2. Wait 800ms for transition
3. Take screenshot: "page5-solution.png"
4. Verify elements:
   - VPN Solution messaging
   - Aurora wave animations
   - Flowing protective dome effect
5. Check console for errors
```

**Page 6 - OPEN SOURCE (Trust)**
```
1. Navigate: Scroll down or click page indicator dot 6
2. Wait 800ms for transition
3. Take screenshot: "page6-opensource.png"
4. Verify elements:
   - Open Source messaging
   - Glass cathedral effect
   - VPN client icons (v2rayng, hiddify, etc.)
   - All 7+ icons loaded
5. Check console for errors
```

**Page 7 - FREE! (Freedom & Pricing)**
```
1. Navigate: Scroll down or click page indicator dot 7
2. Wait 800ms for transition
3. Take screenshot: "page7-pricing-top.png"
4. Scroll down within page 7
5. Take screenshot: "page7-pricing-full.png"
6. Verify elements:
   - Freedom/celebration animation
   - Free trial offer (1GB for 1 Day)
   - 4 pricing cards (Starter, Pro, Premium, Ultimate)
   - "Get Started" buttons
   - Normal scrolling behavior
7. Check console for errors
```

### Step 4: Theme Toggle Testing

```
1. Click theme toggle button
   Tool: mcp_cursor-playwright_browser_click
   Parameters:
     element: "Theme toggle button"
     ref: "[aria-label='Toggle theme']" or button with sun/moon icon

2. Wait for ripple animation (500ms)
   Tool: mcp_cursor-playwright_browser_wait_for
   Parameters:
     time: 0.5

3. Take screenshot of dark mode on current page
   Tool: mcp_cursor-playwright_browser_take_screenshot
   Parameters:
     filename: "dark-mode-current-page"

4. Navigate through all pages in dark mode
   - Take screenshot of each page
   - Filename pattern: "page{N}-dark.png"

5. Toggle back to light mode
6. Verify transition works both ways
```

### Step 5: Language Switcher Testing

```
1. Locate language dropdown in header
   Tool: mcp_cursor-playwright_browser_snapshot
   (Find language dropdown element)

2. Click language dropdown
   Tool: mcp_cursor-playwright_browser_click

3. Take screenshot of dropdown open
   Tool: mcp_cursor-playwright_browser_take_screenshot
   Parameters:
     filename: "language-dropdown-open"

4. Test each language:
   Languages: English, فارسی, 中文, Русский, Українська, हिन्दी
   
   For each language:
   a. Click language option
   b. Wait for content update (300ms)
   c. Take screenshot: "language-{lang}.png"
   d. Verify text changed in header/page

5. Return to English for consistency
```

### Step 6: Mobile Menu Testing

```
1. Resize browser to mobile
   Tool: mcp_cursor-playwright_browser_resize
   Parameters:
     width: 375
     height: 667

2. Take screenshot: "mobile-page1.png"

3. Locate and click hamburger menu
   Tool: mcp_cursor-playwright_browser_click
   Parameters:
     element: "Hamburger menu button"
     ref: "button with menu icon"

4. Take screenshot of menu open
   Tool: mcp_cursor-playwright_browser_take_screenshot
   Parameters:
     filename: "mobile-menu-open"

5. Verify menu contents:
   - Navigation links
   - Close button (X)
   - Language options
   - Theme toggle

6. Click close button
   Tool: mcp_cursor-playwright_browser_click

7. Verify menu closes

8. Resize back to desktop
   Tool: mcp_cursor-playwright_browser_resize
   Parameters:
     width: 1920
     height: 1080
```

### Step 7: Responsive Testing (Three Viewports)

**Mobile - 375x667 (iPhone SE)**
```
1. Resize: 375x667
2. Navigate through all 7 pages
3. Take screenshot of each page
4. Filename pattern: "mobile-page{N}.png"
5. Check for:
   - No horizontal scrollbar
   - Text readable
   - Buttons tappable (44x44px minimum)
   - No overlapping content
   - Proper spacing from edges
```

**Tablet - 768x1024 (iPad)**
```
1. Resize: 768x1024
2. Navigate through all 7 pages
3. Take screenshot of each page
4. Filename pattern: "tablet-page{N}.png"
5. Check for:
   - Responsive layout adjustments
   - Proper use of space
   - Touch-friendly elements
   - Smooth animations
```

**Desktop - 1920x1080**
```
1. Resize: 1920x1080
2. Navigate through all 7 pages
3. Take screenshot of each page
4. Filename pattern: "desktop-page{N}.png"
5. Check for:
   - Optimal desktop layout
   - Proper horizontal margins
   - Content not too wide
   - Animations smooth at 60fps
```

### Step 8: Interactive Element Testing

**Page Indicator Dots**
```
1. Click each dot (1-7) on page indicator
2. Verify navigation to correct page
3. Verify active dot highlighted
4. Take screenshot: "page-indicator-active.png"
```

**Scroll Indicator**
```
1. Verify scroll indicator appears on pages 1-7
2. Verify animation (bounce or pulse)
3. Check visibility in both themes
```

**Navigation Links**
```
1. Click "Blog" link in header
2. Note behavior (placeholder or navigation)
3. Repeat for: FAQ, Privacy, About Us
```

**Pricing Cards (Page 7)**
```
1. Navigate to Page 7
2. Locate "Start Free Trial" button
3. Click button
   Tool: mcp_cursor-playwright_browser_click
4. Note behavior

5. Locate "Get Started" button on each pricing card
6. Click each button
7. Note behavior for each
```

### Step 9: Console Log Analysis

```
Tool: mcp_cursor-playwright_browser_console_messages

Check for:
- JavaScript errors (🔴 Must fix)
- Warnings (🟡 Should investigate)
- Network errors (🔴 Must fix)
- Failed asset loads (🔴 Must fix)

Document all console messages with:
- Type (error/warning/log)
- Message content
- File and line number
- Context (when it occurred)
```

### Step 10: Network Request Analysis

```
Tool: mcp_cursor-playwright_browser_network_requests

Check for:
- Failed requests (404, 500 errors)
- Slow requests (>1s load time)
- Missing assets
- Unoptimized resources

Document:
- URL of failed requests
- Status code
- Resource type
- Expected vs actual
```

### Step 11: Screenshot Analysis with Image Reading

For each screenshot taken, analyze using image reading:

```
Tool: read_file (for screenshots)
Purpose: Analyze visual bugs

Look for:

1. **Layout Issues**:
   - Text overlapping other text
   - Elements too close (<24px)
   - Content overlapping header (should be 80px+ below)
   - Content overlapping footer (should be 80px+ above)
   - Horizontal scrollbars visible

2. **Alignment Issues**:
   - Text not centered when it should be
   - Icons misaligned
   - Buttons not aligned in groups
   - Inconsistent padding

3. **Visual Glitches**:
   - Missing text (white on white, black on black)
   - Broken images (alt text showing)
   - Animation artifacts
   - Flickering or half-rendered elements

4. **Color Issues**:
   - Poor contrast (hard to read)
   - Wrong theme colors applied
   - Invisible elements in dark mode
   - Harsh or ugly colors

5. **Responsive Issues**:
   - Content cut off on mobile
   - Text too small to read
   - Buttons too small to tap
   - Images distorted or stretched

6. **Animation Issues**:
   - Static backgrounds (should animate)
   - Janky or slow animations
   - Elements not animating on page load
   - Wrong animation for page
```

## Bug Documentation Format

For every bug found, create detailed documentation:

```markdown
## Bug Report #{NUMBER}

### Severity
- [ ] Critical - Breaks core functionality
- [ ] High - Major visual/functional issue
- [ ] Medium - Minor issue but noticeable
- [ ] Low - Cosmetic, low impact

### Location
**Page**: Page {N} - {Name}
**Component**: {Component file name from components/}
**Viewport**: Desktop / Tablet / Mobile ({dimensions})
**Theme**: Light / Dark

### Evidence
**Screenshot**: `{filename}.png`
**Console Logs**: {Any relevant console messages}

### Description
{Detailed description of what's wrong}

### Steps to Reproduce
1. {Step 1}
2. {Step 2}
3. {Step 3}

### Expected Behavior
{What should happen}

### Actual Behavior  
{What actually happens}

### Impact
{How this affects user experience}

### Root Cause (if known)
**File**: [components/pages/PageN.tsx](mdc:components/pages/PageN.tsx)
**Issue**: {Specific code or style issue}

### Suggested Fix
```typescript
// Code fix suggestion
```
or
```css
// Style fix suggestion
```

### Related Files
- [file1.tsx](mdc:file1.tsx)
- [file2.css](mdc:file2.css)
```

## Proof of Bug-Free Implementation

After all testing and fixes, provide comprehensive proof:

### 1. Screenshot Gallery

Create a complete gallery showing:
- ✅ All 7 pages in light mode
- ✅ All 7 pages in dark mode
- ✅ All 6 language variations (at least one page)
- ✅ Mobile, tablet, desktop views
- ✅ Theme toggle working
- ✅ Language dropdown open
- ✅ Mobile menu open
- ✅ All interactive states

### 2. Test Results Summary

```markdown
# Complete Test Results - {Date}

## Pages Tested: 7/7 ✅

### Page-by-Page Results

| Page | Light Mode | Dark Mode | Mobile | Tablet | Desktop | Animations | Status |
|------|------------|-----------|--------|--------|---------|------------|--------|
| 1    | ✅         | ✅        | ✅     | ✅     | ✅      | ✅         | PASS   |
| 2    | ✅         | ✅        | ✅     | ✅     | ✅      | ✅         | PASS   |
| 3    | ✅         | ✅        | ✅     | ✅     | ✅      | ✅         | PASS   |
| 4    | ✅         | ✅        | ✅     | ✅     | ✅      | ✅         | PASS   |
| 5    | ✅         | ✅        | ✅     | ✅     | ✅      | ✅         | PASS   |
| 6    | ✅         | ✅        | ✅     | ✅     | ✅      | ✅         | PASS   |
| 7    | ✅         | ✅        | ✅     | ✅     | ✅      | ✅         | PASS   |

## Features Tested: {X}/{X} ✅

- [✅] Page navigation (scroll/swipe)
- [✅] Page indicator clicks
- [✅] Theme toggle with ripple
- [✅] Language switcher (6 languages)
- [✅] Mobile hamburger menu
- [✅] Responsive layouts (3 viewports)
- [✅] All animations working
- [✅] Console clean (no errors)
- [✅] All assets loaded
- [✅] No overlapping content
- [✅] Proper spacing throughout

## Bug Summary

**Critical**: 0
**High**: 0
**Medium**: 0
**Low**: 0

**Total Bugs Found**: 0
**Total Bugs Fixed**: 0
**Outstanding Bugs**: 0

## Performance

- **Page Load Time**: {X}ms
- **Largest Contentful Paint**: {X}ms
- **First Input Delay**: {X}ms
- **Cumulative Layout Shift**: {X}
- **Animation FPS**: 60fps ✅

## Console Status

- **Errors**: 0 ✅
- **Warnings**: 0 ✅
- **Network Failures**: 0 ✅

## Final Verdict

✅ **APPLICATION IS BUG-FREE AND PRODUCTION-READY**

All features tested and working correctly across all pages, themes, languages, and viewport sizes.
```

### 3. Visual Comparison Grid

Create a visual comparison showing before/after for any fixes:

```markdown
## Visual Proof

### Before Fixes
{Screenshot showing issues}

### After Fixes
{Screenshot showing resolution}

### Side-by-Side Comparison
{Annotated screenshots highlighting improvements}
```

### 4. Code Quality Report

```markdown
## Code Quality

### Linting Status
```bash
npm run lint
```
**Result**: No linting errors ✅

### TypeScript Status
**Result**: No TypeScript errors ✅

### Build Status
```bash
npm run build
```
**Result**: Build successful ✅
```

## Automated Testing Script

When asked to test the application, execute this exact sequence:

```typescript
// Pseudo-code for testing workflow
async function comprehensiveTest() {
  // 1. Navigate and initial state
  await navigate('http://localhost:3000');
  await screenshot('initial-state');
  await snapshot();
  
  // 2. Test all pages
  for (let page = 1; page <= 7; page++) {
    await navigateToPage(page);
    await wait(800);
    await screenshot(`page${page}-light`);
    await checkAnimations(page);
    await checkConsole();
  }
  
  // 3. Test dark mode
  await clickThemeToggle();
  await wait(500);
  for (let page = 1; page <= 7; page++) {
    await navigateToPage(page);
    await screenshot(`page${page}-dark`);
  }
  await clickThemeToggle(); // Back to light
  
  // 4. Test languages
  const languages = ['English', 'فارسی', '中文', 'Русский', 'Українська', 'हिन्दी'];
  for (const lang of languages) {
    await selectLanguage(lang);
    await screenshot(`language-${lang}`);
  }
  
  // 5. Test mobile
  await resize(375, 667);
  await testMobileMenu();
  for (let page = 1; page <= 7; page++) {
    await navigateToPage(page);
    await screenshot(`mobile-page${page}`);
  }
  
  // 6. Test tablet
  await resize(768, 1024);
  for (let page = 1; page <= 7; page++) {
    await navigateToPage(page);
    await screenshot(`tablet-page${page}`);
  }
  
  // 7. Test desktop
  await resize(1920, 1080);
  for (let page = 1; page <= 7; page++) {
    await navigateToPage(page);
    await screenshot(`desktop-page${page}`);
  }
  
  // 8. Analyze all screenshots
  await analyzeAllScreenshots();
  
  // 9. Generate report
  await generateComprehensiveReport();
}
```

## Success Criteria Checklist

Before declaring application bug-free, verify:

- [ ] All 7 pages load without errors
- [ ] All pages work in light mode
- [ ] All pages work in dark mode
- [ ] All 6 languages work correctly
- [ ] Page navigation works (scroll/click/swipe)
- [ ] Page indicator shows correct active page
- [ ] Scroll indicator visible and animates
- [ ] Theme toggle works with ripple effect
- [ ] Mobile menu opens and closes
- [ ] All animations run smoothly
- [ ] No console errors or warnings
- [ ] All network requests succeed
- [ ] All images and assets load
- [ ] Responsive on mobile (375px)
- [ ] Responsive on tablet (768px)
- [ ] Responsive on desktop (1920px)
- [ ] No overlapping content anywhere
- [ ] Proper spacing (≥24px between elements)
- [ ] Content 80-100px from header/footer
- [ ] No horizontal scrollbars
- [ ] Text readable in all themes
- [ ] Buttons accessible (44x44px minimum on mobile)
- [ ] Focus states visible
- [ ] Keyboard navigation works
- [ ] Performance: 60fps animations
- [ ] Build succeeds without errors
- [ ] Linting passes with no errors
- [ ] TypeScript compiles without errors

## Integration with Development Workflow

After testing and finding bugs:

1. **Document all bugs** using the format above
2. **Prioritize by severity**: Critical → High → Medium → Low
3. **Create fix plan** with specific files and changes
4. **Implement fixes** systematically
5. **Re-test after each fix** to verify resolution
6. **Update documentation** with before/after evidence
7. **Run full test suite again** to ensure no regressions
8. **Generate final proof** of bug-free implementation

## Files to Reference for Fixes

Based on bug location:

- **Page-specific issues**: [components/pages/Page{N}.tsx](mdc:components/pages/)
- **Layout issues**: [app/page.tsx](mdc:app/page.tsx), [app/globals.css](mdc:app/globals.css)
- **Header issues**: [components/Header.tsx](mdc:components/Header.tsx)
- **Footer issues**: [components/Footer.tsx](mdc:components/Footer.tsx)
- **Theme issues**: [contexts/ThemeContext.tsx](mdc:contexts/ThemeContext.tsx)
- **Animation issues**: [tailwind.config.ts](mdc:tailwind.config.ts), page components
- **Responsive issues**: Tailwind classes in components
- **Translation issues**: [lib/translations.ts](mdc:lib/translations.ts)

## Final Deliverable

The final deliverable after testing should include:

1. **Complete screenshot gallery** (50+ screenshots)
2. **Bug report document** (with all bugs found and fixed)
3. **Test results summary** (checklist format)
4. **Console log report** (clean or with issues documented)
5. **Network analysis** (all requests successful)
6. **Performance metrics** (load time, FPS, etc.)
7. **Before/after comparisons** (for any fixes made)
8. **Code quality report** (lint, build, TypeScript status)
9. **Final verdict statement** (bug-free or outstanding issues)

This comprehensive proof demonstrates thorough QA and validates production readiness.